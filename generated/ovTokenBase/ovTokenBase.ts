// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TokenCreated extends ethereum.Event {
  get params(): TokenCreated__Params {
    return new TokenCreated__Params(this);
  }
}

export class TokenCreated__Params {
  _event: TokenCreated;

  constructor(event: TokenCreated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ovTokenBase extends ethereum.SmartContract {
  static bind(address: Address): ovTokenBase {
    return new ovTokenBase("ovTokenBase", address);
  }

  ETH_INITIAL_LIQUIDITY(): BigInt {
    let result = super.call(
      "ETH_INITIAL_LIQUIDITY",
      "ETH_INITIAL_LIQUIDITY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ETH_INITIAL_LIQUIDITY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ETH_INITIAL_LIQUIDITY",
      "ETH_INITIAL_LIQUIDITY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOKEN_INITIAL_LIQUIDITY(): BigInt {
    let result = super.call(
      "TOKEN_INITIAL_LIQUIDITY",
      "TOKEN_INITIAL_LIQUIDITY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_TOKEN_INITIAL_LIQUIDITY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOKEN_INITIAL_LIQUIDITY",
      "TOKEN_INITIAL_LIQUIDITY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEstimatedETH(desiredTokenAmount: BigInt): BigInt {
    let result = super.call(
      "getEstimatedETH",
      "getEstimatedETH(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(desiredTokenAmount)]
    );

    return result[0].toBigInt();
  }

  try_getEstimatedETH(desiredTokenAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEstimatedETH",
      "getEstimatedETH(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(desiredTokenAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenCount(): BigInt {
    let result = super.call("getTokenCount", "getTokenCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenCount",
      "getTokenCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniswapV2Router(): Address {
    let result = super.call(
      "uniswapV2Router",
      "uniswapV2Router():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_uniswapV2Router(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV2Router",
      "uniswapV2Router():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateTokenAndAddLiquidityCall extends ethereum.Call {
  get inputs(): CreateTokenAndAddLiquidityCall__Inputs {
    return new CreateTokenAndAddLiquidityCall__Inputs(this);
  }

  get outputs(): CreateTokenAndAddLiquidityCall__Outputs {
    return new CreateTokenAndAddLiquidityCall__Outputs(this);
  }
}

export class CreateTokenAndAddLiquidityCall__Inputs {
  _call: CreateTokenAndAddLiquidityCall;

  constructor(call: CreateTokenAndAddLiquidityCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get desiredTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateTokenAndAddLiquidityCall__Outputs {
  _call: CreateTokenAndAddLiquidityCall;

  constructor(call: CreateTokenAndAddLiquidityCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
